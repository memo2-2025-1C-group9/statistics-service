name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    branches:
      - main

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black
        run: black --check app tests

  start-docker:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create Docker network
        run: docker network create datadog-agent-monitoring

      - name: Copy environment variables
        run: cp .env.example .env.development

      - name: Start Docker services
        run: docker-compose up -d

      - name: Wait for API to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/health; then
              echo "API is ready"
              break
            fi
            echo "Waiting for API..."
            sleep 5
          done

  test:
    runs-on: ubuntu-latest
    needs: start-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          PYTHONPATH=. pytest --cov=app --cov=tests --cov-report=term-missing --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  stop-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Recreate .env.development file
        run: |
          cp .env.example .env.development

      - name: Stop Docker services
        run: docker-compose down

  deploy-coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Generate coverage report
        run: |
          PYTHONPATH=. pytest --cov=app --cov=tests --cov-report=html

      - name: Checkout GitHub Pages
        uses: actions/checkout@v4
        with:
          repository: memo2-2025-1c-group9/memo2-2025-1c-group9.github.io
          token: ${{ secrets.GH_PAT }}
          path: pages

      - name: Update coverage report
        run: |
          mkdir -p pages/coverages/template-service-python
          cp -r htmlcov/* pages/coverages/template-service-python/

      - name: Commit and push changes
        working-directory: pages
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "Update coverage report for template-service-python"
          git push

  deploy-to-render:
    runs-on: ubuntu-latest
    needs: [test, stop-docker]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip-render]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Copy Environment Variables to Render
        if: ${{ !contains(github.event.head_commit.message, '[skip-env-sync]') }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        run: |
          pip install requests
          python scripts/sync_env_to_render.py